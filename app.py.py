# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E8zM34Z967aGF2rnhQCUKFWRKPtEnWUL
"""

!pip install streamlit

import streamlit as st
import joblib
import numpy as np

# Load model
model = joblib.load("model.pkl")

# App title
st.title("🧬 Breast Cancer Tumor Classifier")
st.write("This app predicts whether a breast tumor is **benign** or **malignant** based on diagnostic features.")

# Feature inputs
features = [
    'mean radius', 'mean texture', 'mean perimeter', 'mean area', 'mean smoothness',
    'mean compactness', 'mean concavity', 'mean concave points', 'mean symmetry',
    'mean fractal dimension', 'radius error', 'texture error', 'perimeter error',
    'area error', 'smoothness error', 'compactness error', 'concavity error',
    'concave points error', 'symmetry error', 'fractal dimension error',
    'worst radius', 'worst texture', 'worst perimeter', 'worst area',
    'worst smoothness', 'worst compactness', 'worst concavity', 'worst concave points',
    'worst symmetry', 'worst fractal dimension'
]

user_input = []
for feature in features:
    val = st.number_input(f"{feature}", value=0.0, format="%.5f")
    user_input.append(val)

# Predict
if st.button("Predict Tumor Type"):
    input_array = np.array(user_input).reshape(1, -1)
    prediction = model.predict(input_array)
    result = "Benign (Non-cancerous)" if prediction[0] == 1 else "Malignant (Cancerous)"
    st.success(f"🔍 The model predicts: **{result}**")

import streamlit as st
import joblib
import numpy as np

# Load the trained model
try:
    model = joblib.load("model.pkl")
except FileNotFoundError:
    st.error("❌ model.pkl not found. Please make sure the trained model file is in the same directory.")
    st.stop()

# App title and description
st.set_page_config(page_title="Breast Cancer Classifier", layout="wide")
st.title("🧬 Breast Cancer Tumor Classifier")
st.markdown("This app predicts whether a breast tumor is **malignant (cancerous)** or **benign (non-cancerous)** based on diagnostic measurements.")

# Feature input
st.header("🔢 Input Diagnostic Features")
features = [
    'mean radius', 'mean texture', 'mean perimeter', 'mean area', 'mean smoothness',
    'mean compactness', 'mean concavity', 'mean concave points', 'mean symmetry',
    'mean fractal dimension', 'radius error', 'texture error', 'perimeter error',
    'area error', 'smoothness error', 'compactness error', 'concavity error',
    'concave points error', 'symmetry error', 'fractal dimension error',
    'worst radius', 'worst texture', 'worst perimeter', 'worst area',
    'worst smoothness', 'worst compactness', 'worst concavity', 'worst concave points',
    'worst symmetry', 'worst fractal dimension'
]

# Organize inputs in columns
input_data = []
cols = st.columns(3)
for i, feature in enumerate(features):
    val = cols[i % 3].number_input(label=feature, value=0.0, format="%.5f")
    input_data.append(val)

# Prediction button
st.markdown("##")
if st.button("🔍 Predict Tumor Type"):
    input_array = np.array(input_data).reshape(1, -1)
    prediction = model.predict(input_array)[0]
    result = "🟢 Benign (Non-Cancerous)" if prediction == 1 else "🔴 Malignant (Cancerous)"

    st.subheader("🧠 Prediction Result:")
    st.success(f"The tumor is predicted to be: **{result}**")